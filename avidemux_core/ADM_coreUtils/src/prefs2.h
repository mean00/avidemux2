// automatically generated by admSerialization.py do not edit
#include "string"
#pragma once
typedef struct {
struct  {
	uint32_t apiVersion;
}version;
struct  {
	bool pts_timings_tooltips;
	bool time_fields_extra_buttons;
	bool swap_if_A_greater_than_B;
	bool saveprefsonexit;
	bool ignoresavedmarkers;
	bool reuse_2pass_log;
	bool audiobar_uses_master;
	uint32_t threading_lavc;
	uint32_t cpu_caps;
	uint32_t cache_size;
	bool shared_cache;
	bool mpeg_no_limit;
	bool dxva2;
	bool dxva2_override_blacklist_version;
	bool dxva2_override_blacklist_profile;
	bool vdpau;
	bool xvba;
	bool libva;
	bool videotoolbox;
	bool enable_opengl;
	bool filter_preview_canvas_opengl;
	bool cap_refresh_enabled;
	uint32_t cap_refresh_value;
	std::string sdlDriver;
	bool use_last_read_dir_as_target;
	bool swap_mouse_wheel;
}features;
struct  {
	bool use_alternate_kbd_shortcuts;
	bool swap_up_down_keys;
	std::string alt_mark_a;
	std::string alt_mark_b;
	std::string alt_edit_mark_a;
	std::string alt_edit_mark_b;
	std::string alt_reset_mark_a;
	std::string alt_reset_mark_b;
	std::string alt_reset_markers;
	std::string alt_goto_mark_a;
	std::string alt_goto_mark_b;
	std::string alt_begin;
	std::string alt_end;
	std::string alt_delete;
}keyboard_shortcuts;
struct  {
	bool enabled;
	uint32_t lastCheck;
}update;
struct  {
	std::string lastdir_read;
	std::string lastdir_write;
	std::string file1;
	std::string file2;
	std::string file3;
	std::string file4;
}lastfiles;
struct  {
	std::string lastdir_read;
	std::string lastdir_write;
	std::string file1;
	std::string file2;
	std::string file3;
	std::string file4;
}lastprojects;
uint32_t message_level;
struct  {
	std::string audiodevice;
	std::string alsa_device;
}audio_device;
uint32_t videodevice;
struct  {
	uint32_t encoding;
	uint32_t playback;
}priority;
struct  {
	uint32_t postproc_type;
	uint32_t postproc_value;
	uint32_t downmixing;
	std::string language;
	bool warn_for_fonts;
	bool multiload_use_custom_size;
	uint32_t multiload_custom_size_m;
	bool delete_first_pass_log_files;
}Default;
struct  {
	bool avisynth_always_ask;
	uint32_t avisynth_defaultport;
	uint32_t avisynth_localport;
}avisynth;
bool reset_encoder_on_video_load;
struct  {
	bool load_in_reverse_order;
	uint32_t fps_type;
}pictures;
struct  {
	uint32_t tonemapping;
	float target_luminance;
	uint32_t out_of_gamut_handling;
}hdr;
struct  {
	bool toolbar_visible;
	bool statusbar_visible;
	bool codec_visible;
	bool navigation_visible;
	bool audiometer_visible;
	bool volume_visible;
	bool controls_visible;
	bool selection_visible;
	bool time_visible;
	bool slider_visible;
}toolbars;
}my_prefs_struct;
